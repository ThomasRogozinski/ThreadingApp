@{
    ViewBag.Title = "Mutex";
}
<div style="width: 50%; margin: 0 auto;">
    <p style="margin-top: 40px;">
        This example shows mutex object protecting shared resource from simultaneous access by multiple threads or processes.
        The state of a mutex object is either set to signaled, when it is not owned by any thread, or nonsignaled, when it is owned.
        Only one thread at a time can own a mutex object. For example, to prevent two threads from writing to shared memory at the same time,
        each thread waits for ownership of a mutex object before executing the code that accesses the memory. After writing to the shared memory,
        the thread releases the mutex object. This example demonstrates how to use the classes Mutex, AutoResetEvent, and WaitHandle in processing threads.
    </p>
    <ul id="messages"></ul>
</div>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>

        $(function () {
            // initialize progress bar
            $("#progressbar").progressbar({ value: 0 });

            // initialize the connection to the server
            var threads = $.connection.threadsHub;

            // client-side sendMessage function that will be called from the server-side
            threads.client.showMessage = function (thread, message) {
                // Add the message to the page.
                $('#messages').append('<li><strong>' + thread + '</strong>: ' + message + '</li>');
            };

            threads.client.showProgress = function (value) {
                $("#heading").html(value + "%");
                $("#progressbar").progressbar("value", value);
            };

            // establish the connection to the server and start server-side operation
            $.connection.hub.start().done(function () {
                // call the method CallLongOperation defined in the Hub
                threads.server.runMutexSample();
            });
        });

    </script>
}